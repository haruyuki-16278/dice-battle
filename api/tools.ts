#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run
import "https://deno.land/std@0.191.0/dotenv/load.ts";
import * as cmd from "https://deno.land/x/cmd@v1.2.0/mod.ts";

const program = new cmd.Command("./tools.ts");
program.version("0.0.1");

const DENO_LAMBDA_VERSION = "1.41.1";

const chdirApiRoute = () => {
  if (typeof import.meta.dirname !== "string") {
    console.error("error: invalid dirname");
    Deno.exit(1);
  }
  Deno.chdir(import.meta.dirname);
};

const indexTs = (handlerName: string): string => `// generated by script
import {
  APIGatewayProxyEventV2,
  APIGatewayProxyResultV2,
  Context,
} from "https://deno.land/x/lambda@${DENO_LAMBDA_VERSION}/mod.ts";

// deno-lint-ignore require-await
export async function ${handlerName}(
  event: APIGatewayProxyEventV2,
  context: Context,
): Promise<APIGatewayProxyResultV2> {
  return {
    statusCode: 200,
    headers: { "content-type": "text/html;charset=utf8" },
    body: \`Welcome to deno ${Deno.version.deno} ðŸ¦•\`,
  };
}
`;
const dockerfile = (handlerName: string) =>
  `FROM denoland/deno-lambda:${DENO_LAMBDA_VERSION}

COPY index.ts .
RUN deno cache index.ts

CMD ["index.${handlerName}"]
`;

program
  .command("gen <route> <method> [handler]")
  .description("generate api function set", {
    "<route>": "required. separated with / is also supported.",
    "<method>": "required. ex.) get, post, put, delete... etc.",
    "[handler]": "handler name, default: handler",
  })
  .action(async (route: string, method: string, handler?: string) => {
    chdirApiRoute();

    const createRepoCommand = new Deno.Command("aws", {
      args: [
        "ecr",
        "create-repository",
        "--repository-name",
        `${method}-${route}-dice-battle`,
      ],
    });
    const createRepoProcess = createRepoCommand.spawn();

    const { success } = await createRepoProcess.output();
    if (!success) {
      console.error("create repository failed");
      Deno.exit(1);
    }

    const dir = `${route}/${method}`;
    await Deno.mkdir(dir, { recursive: true });
    await Deno.writeTextFile(`${dir}/index.ts`, indexTs(handler ?? "handler"));
    await Deno.writeTextFile(
      `${dir}/Dockerfile`,
      dockerfile(handler ?? "handler")
    );

    console.log("generate success!");
  });

program
  .command("upload <route> <method>")
  .action(async (route: string, method: string) => {
    chdirApiRoute();
    // https://docs.deno.com/runtime/tutorials/subprocess

    const region = Deno.env.get("AWS_REGION");
    const registry = Deno.env.get("ECR_REGISTRY");
    if (!region || !registry) {
      console.error("invalid region. please check dotenv.");
      Deno.exit(1);
    }

    const getPassCommand = new Deno.Command("aws", {
      args: ["ecr", "get-login-password", "--region", region],
      stdout: "piped",
    });
    const dockerLoginCommand = new Deno.Command("docker", {
      args: ["login", "--username", "AWS", "--password-stdin", registry],
      stdin: "piped",
    });

    const getPassProcess = getPassCommand.spawn();
    const dockerLoginProcess = dockerLoginCommand.spawn();

    getPassProcess.stdout.pipeTo(dockerLoginProcess.stdin);

    if (!(await dockerLoginProcess.output()).success) {
      console.error("login failed");
      Deno.exit(1);
    }

    const imageName = `${method}-${route}-dice-battle`;

    const buildCommand = new Deno.Command("docker", {
      args: ["buildx", "build", "--tag", imageName, `./${route}/${method}`],
    });
    const buildProcess = buildCommand.spawn();

    if (!(await buildProcess.output()).success) {
      console.error("build failed");
      Deno.exit(1);
    }

    const tagCommand = new Deno.Command("docker", {
      args: ["tag", `${imageName}:latest`, `${registry}/${imageName}:latest`],
    });
    const tagProcess = tagCommand.spawn();
    if (!(await tagProcess.output()).success) {
      console.error("tag failed");
      Deno.exit(1);
    }

    const pushCommand = new Deno.Command("docker", {
      args: ["push", `${registry}/${imageName}:latest`],
    });
    const pushProcess = pushCommand.spawn();
    if (!(await pushProcess.output()).success) {
      console.error("push failed");
      Deno.exit(1);
    }

    console.log("upload success!");
  });

program.parse(Deno.args);
