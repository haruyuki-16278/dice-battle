// generated by script
import {
  APIGatewayProxyResultV2,
  Context,
} from "https://deno.land/x/lambda@1.41.1/mod.ts";
import { DynamoDBClient } from "https://esm.sh/@aws-sdk/client-dynamodb@3.538.0";
import { ScanCommand } from "https://esm.sh/@aws-sdk/lib-dynamodb@3.538.0";
import { UpdateCommand } from "https://esm.sh/@aws-sdk/lib-dynamodb@3.538.0";
import { DynamoDBDocumentClient } from "https://esm.sh/@aws-sdk/lib-dynamodb@3.538.0";

const key = Deno.env.get("ACCESS");
const secret = Deno.env.get("SECRET");

if (!key || !secret) {
  console.error("credentials unset");
  Deno.exit(1);
}

const ddbClient = new DynamoDBClient({
  region: Deno.env.get("AWS_REGION"),
  credentials: {
    accessKeyId: key,
    secretAccessKey: secret,
  },
});
const ddbDocClient = DynamoDBDocumentClient.from(ddbClient);
const tableName = "dice-battle";

// deno-lint-ignore require-await
export async function handler(
  data: { roomId: string; playerId: string; roll: string },
  _context: Context
): Promise<APIGatewayProxyResultV2> {
  console.log(data);
  console.log(!!data.roomId, !!data.playerId, !!data.roll);
  if (!!data.roomId && !!data.playerId && !!data.roll) {
    const currentStatus = await ddbDocClient.send(
      new ScanCommand({
        TableName: tableName,
        FilterExpression: "Id = :g",
        ExpressionAttributeValues: {
          ":g": data.roomId,
        },
      })
    );
    if (!currentStatus.Items) {
      return {
        statusCode: 200,
        headers: { "content-type": "application/json;charset=utf8" },
        body: JSON.stringify({
          code: "E-001",
          message: "invalId data",
        }),
      };
    }

    const isHost = currentStatus.Items[0].hostPlayer === data.playerId;
    const names = isHost
      ? {
          "#hostRollLog": "hostRollLog",
        }
      : {
          "#guestRollLog": "guestRollLog",
        };
    const values = isHost
      ? {
          ":hostRollLog": JSON.stringify(
            currentStatus.Items[0].hostRollLog.push(data.roll)
          ),
        }
      : {
          ":guestRollLog": JSON.stringify(
            currentStatus.Items[0].guestRollLog.push(data.roll)
          ),
        };
    const update = isHost
      ? "set #hostRollLog = :hostRollLog"
      : "set #guestRollLog = :guestRollLog";
    const updateStatus = await ddbDocClient.send(
      new UpdateCommand({
        TableName: tableName,
        Key: {
          Id: data.roomId,
        },
        // @ts-ignore
        ExpressionAttributeNames: { ...names },
        ExpressionAttributeValues: { ...values },
        UpdateExpression: update,
      })
    );
    console.log(updateStatus);

    return {
      statusCode: 200,
      headers: { "content-type": "application/json;charset=utf8" },
      body: JSON.stringify({
        code: "S-001",
        message: "succeeded",
      }),
    };
  }
  return {
    statusCode: 200,
    headers: { "content-type": "application/json;charset=utf8" },
    body: JSON.stringify({
      code: "E-001",
      message: "invalId data",
    }),
  };
}
